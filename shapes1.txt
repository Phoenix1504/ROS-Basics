#!/usr/bin/env python3

import rospy
from geometry_msgs.msg import Twist
import turtle

def move_turtle(linear_speed, angular_speed, distance):
    rospy.init_node('turtle_shapes', anonymous=True)
    pub = rospy.Publisher('/turtle1/cmd_vel', Twist, queue_size=10)
    rate = rospy.Rate(10)  # 10Hz

    move_cmd = Twist()
    move_cmd.linear.x = linear_speed
    move_cmd.angular.z = angular_speed

    total_distance = 0
    while total_distance < distance and not rospy.is_shutdown():
        pub.publish(move_cmd)
        rate.sleep()
        total_distance += abs(linear_speed / 10.0)  # Assume 10Hz update rate

    move_cmd.linear.x = 0
    move_cmd.angular.z = 0
    pub.publish(move_cmd)

def draw_square(size):
    for _ in range(4):
        turtle.forward(size)
        turtle.right(90)

def draw_triangle(size):
    for _ in range(3):
        turtle.forward(size)
        turtle.right(120)

def draw_star(size):
    for _ in range(5):
        turtle.forward(size)
        turtle.right(144)

def main():
    try:
        rospy.wait_for_service('/reset')
        reset_simulation = rospy.ServiceProxy('/reset', std_srvs.srv.Empty)
        reset_simulation()
    except rospy.ROSException:
        rospy.loginfo("Turtlesim not running, starting it now.")
        rospy.spawn_command('rosrun turtlesim turtlesim_node')

    rospy.sleep(1)  # Wait for turtlesim to start

    turtle.speed(1)  # Set turtle drawing speed

    draw_square(2)
    move_turtle(1, 0, 2)  # Move turtle 2 units forward

    draw_triangle(3)
    move_turtle(1, 0, 2)  # Move turtle 2 units forward

    draw_star(2)
    move_turtle(1, 0, 2)  # Move turtle 2 units forward

    turtle.done()

if __name__ == '__main__':
    main()
